"use strict";

require("core-js/modules/es6.symbol.js");

require("core-js/modules/es6.string.iterator.js");

require("core-js/modules/es6.array.iterator.js");

require("core-js/modules/web.dom.iterable.js");

require("core-js/modules/es6.array.from.js");

require("core-js/modules/es7.object.entries.js");

require("core-js/modules/es6.array.slice.js");

require("core-js/modules/es6.function.name.js");

require("core-js/modules/es6.regexp.replace.js");

require("core-js/modules/es6.object.to-string.js");

require("core-js/modules/es6.regexp.to-string.js");

require("core-js/modules/es6.regexp.split.js");

require("core-js/modules/es6.array.sort.js");

require("core-js/modules/es6.object.keys.js");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

(function () {
  function e(e) {
    if (C = [], e) for (var _i = 0, _Object$entries = Object.entries(e.target.options); _i < _Object$entries.length; _i++) {
      var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
          _t = _Object$entries$_i[0],
          _a = _Object$entries$_i[1];

      _a.selected && _a.value && 5 === _a.value.length && C.push(_a.value);
    } else document.getElementById("landkreisSelect").dispatchEvent(new Event("change"));
  }

  function t(e) {
    e ? S = e.target.value : document.querySelectorAll("input[name=colorscheme]").forEach(function (e) {
      e.checked && e.dispatchEvent(new Event("change"));
    });
  }

  function a(e) {
    switch (e) {
      case "lgg":
      case "3":
        e = "PURPLEGREENYELLOW";
        break;

      case "rki":
      case "2":
        e = "RKIHEATMAP";
        break;

      default:
        e = "DEFAULT";
    }

    document.querySelectorAll("input[name=colorscheme]").forEach(function (t) {
      t.value !== e || t.disabled ? t.checked = !1 : t.checked = !0;
    });
  }

  function n() {
    switch (S) {
      case "PURPLEGREENYELLOW":
        return "3";

      case "RKIHEATMAP":
        return "2";

      default:
        return "1";
    }
  }

  function o(e) {
    e ? f = "v2" === e.target.value : document.querySelectorAll("input[name=heatmapversion]").forEach(function (e) {
      e.checked && e.dispatchEvent(new Event("change"));
    }), f ? (document.getElementById("btnradio1").checked = !0, document.getElementById("btnradio1").dispatchEvent(new Event("change")), document.getElementById("btnradio2").disabled = !0, document.getElementById("btnradio3").disabled = !0, document.getElementById("btnradio4").disabled = !0) : (document.getElementById("btnradio2").disabled = !1, document.getElementById("btnradio3").disabled = !1, document.getElementById("btnradio4").disabled = !1);
  }

  function l(e) {
    switch (e) {
      case "v2":
      case "2":
        e = "v2";
        break;

      default:
        e = "v1";
    }

    document.querySelectorAll("input[name=heatmapversion]").forEach(function (t) {
      t.value !== e || t.disabled ? t.checked = !1 : t.checked = !0;
    });
  }

  function i(e) {
    document.getElementById("legendContainer").innerHTML = "";
    var t = document.createElement("div");
    t.setAttribute("class", "d-xl-flex justify-content-between");
    var a = document.createElement("p");
    a.setAttribute("class", "text-muted small"), a.innerText = "Maus über / Finger auf eine Kachel für Details.", t.appendChild(a), a = document.createElement("p"), a.setAttribute("class", "text-muted small"), a.innerHTML = "URL f\xFCr diese Ansicht: <a href=\"".concat(p(e), "\">").concat(p(e), "</a>"), t.appendChild(a), document.getElementById("legendContainer").appendChild(t), t = document.createElement("dl"), t.setAttribute("class", "row text-muted"), t.innerHTML = f ? '<dt class="col-xl-3">Farbschema</dt><dd class="col-xl-9">gemeldete COVID-19-Fälle in der Kalenderwoche pro 100.000 Personen in der Altersgruppe (7-Tage-Inzidenz). Inzidenzen der aktuellen Kalenderwoche sind niedriger und enthalten Unsicherheiten. Ab Mitte der Woche können Tendenzen sichtbar werden.</dd>' : '<dt class="col-xl-3">Farbschema</dt><dd class="col-xl-9">gemeldete COVID-19-Fälle der letzten 7 Tage pro 100.000 Personen in der Altersgruppe (7-Tage-Inzidenz). Tage ohne Daten werden in der Kategorie „0–5“ dargestellt.</dd>', document.getElementById("legendContainer").appendChild(t);
    var n = document.createElement("ul");
    n.setAttribute("class", "list-inline row"), D[S].ranges.forEach(function (e) {
      var t = document.createElement("li");
      t.setAttribute("class", "list-inline-item col-lg-2 col-md-3 col-sm-4 col-6");
      var a = "".concat(0 === e.min ? "" : ">", "&#8201;").concat(e.min).concat(isFinite(e.max) ? "&#8239;&#8211;&#8201;" + e.max : "");
      t.innerHTML = "<span style=\"background-color:".concat(e.color, ";height:16px;width:16px;margin-right:8px;display:inline-block\"></span><span style=\"vertical-align:text-bottom\">").concat(a, "</span>"), n.appendChild(t);
    }), document.getElementById("legendContainer").appendChild(n), t = document.createElement("dl"), t.setAttribute("class", "row text-muted"), t.innerHTML = '<dt class="col-xl-3">X-Achse</dt><dd class="col-xl-9">zeitlicher Verlauf</dd><dt class="col-xl-3">Y-Achse</dt><dd class="col-xl-9">Altersgruppen und Gesamtbevölkerung, Stand: 31.12.2019.</dd>', document.getElementById("legendContainer").appendChild(t), a = document.createElement("p"), a.setAttribute("class", "text-muted");
    var o = document.createElement("a");
    f ? o.setAttribute("href", "https://github.com/tschach/covaltvis/blob/main/data/v2/".concat(e, "v2.json")) : o.setAttribute("href", "https://github.com/tschach/covaltvis/blob/main/data/".concat(e, ".json")), o.innerText = "Datensatz auf Github", a.appendChild(o), document.getElementById("legendContainer").appendChild(a);
  }

  function r(e) {
    if (e) {
      z = e.target.value;

      var _t2 = new Date();

      switch (z) {
        case "oct2020":
          A = "2020-10-01", F.options.scales.x.time.unit = "week";
          break;

        case "jan2021":
          A = "2021-01-01", F.options.scales.x.time.unit = "week";
          break;

        case "last28d":
          _t2.setDate(_t2.getDate() - 28), A = u(_t2), F.options.scales.x.time.unit = "day";
          break;

        default:
          A = null, F.options.scales.x.time.unit = "week";
      }
    } else document.querySelectorAll("input[name=timeframe]").forEach(function (e) {
      e.checked && e.dispatchEvent(new Event("change"));
    });
  }

  function c(e) {
    switch (e) {
      case "last28d":
      case "4":
        e = "last28d";
        break;

      case "jan2021":
      case "3":
        e = "jan2021";
        break;

      case "oct2020":
      case "2":
        e = "oct2020";
        break;

      default:
        e = "all";
    }

    document.querySelectorAll("input[name=timeframe]").forEach(function (t) {
      t.value !== e || t.disabled ? t.checked = !1 : t.checked = !0;
    });
  }

  function d() {
    switch (z) {
      case "last28d":
        return "4";

      case "jan2021":
        return "3";

      case "oct2020":
        return "2";

      default:
        return "1";
    }
  }

  function s() {
    g(A, v);
  }

  function m(e, t) {
    var a;
    return a = t ? "data/v2/".concat(e, "v2.json") : "data/".concat(e, ".json"), axios.get(a);
  }

  function u(e) {
    return e.getFullYear() + "-" + ("0" + (e.getMonth() + 1)).slice(-2) + "-" + ("0" + e.getDate()).slice(-2);
  }

  function h(e) {
    var t = "matrixChartCanvas".concat(e),
        a = document.createElement("canvas");
    return a.setAttribute("id", t), f ? a.setAttribute("style", "width:100%;height:40vw;max-height:450px;min-height:300px;") : a.setAttribute("style", "width:100%;height:33vw;max-height:400px;min-height:250px;"), document.getElementById("canvasContainer").appendChild(a), t;
  }

  function p(e) {
    return !0 === x ? "http://127.0.0.1:8080/#".concat(e, "/").concat(f ? "v2" : "v1", "/").concat(d(), "/").concat(n()) : "https://tschach.github.io/covaltvis/#".concat(e, "/").concat(f ? "v2" : "v1", "/").concat(d(), "/").concat(n());
  }

  function g(e, t) {
    e = e || "2020-01-27", t = t || "2050-12-31", document.getElementById("canvasContainer").innerHTML = "", w = 0, C.forEach(function (a) {
      var n = h(a);
      b = document.getElementById(n).getContext("2d"), m(a, f).then(function (n) {
        if (n.data) {
          (function () {
            var o,
                l = [];

            if (f) {
              var _loop = function _loop() {
                var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i2], 2),
                    e = _Object$entries2$_i[0],
                    t = _Object$entries2$_i[1];

                t.incidenceByAgegroup && (M.forEach(function (e) {
                  var a = 0;
                  a = t.incidenceByAgegroup[e], "total" !== e && l.push({
                    x: t.label,
                    y: e,
                    v: a,
                    first: t.first,
                    last: t.last,
                    c: t.newCasesByAgegroup[e],
                    p: n.data.populations[e]
                  });
                }), l.push({
                  x: t.label,
                  y: "total",
                  v: t.incidence,
                  first: t.first,
                  last: t.last,
                  c: t.newCases,
                  p: n.data.populations.total
                }));
              };

              for (var _i2 = 0, _Object$entries2 = Object.entries(n.data.byWeek); _i2 < _Object$entries2.length; _i2++) {
                _loop();
              }

              O.data.datasets[0].data = l, w = l.length / M.length;

              var _e2 = document.createElement("h2");

              var _t3;

              _e2.setAttribute("class", "offset-xl-1 col-xl-10 lead"), _e2.innerText = k.matrixChartTitle(E[a].name, j(new Date(n.data.lastCaseDate)));

              var _o = document.getElementById("titleContainer");

              for (; _t3 = _o.firstChild;) {
                _t3.remove();
              }

              _o.appendChild(_e2);

              try {
                y.destroy();
              } catch (e) {} finally {
                y = new Chart(b, O);
              }

              i(a), document.getElementById("resultsContainer").scrollIntoView(!0);
            } else {
              var _loop2 = function _loop2() {
                var _Object$entries3$_i = _slicedToArray(_Object$entries3[_i3], 2),
                    a = _Object$entries3$_i[0],
                    i = _Object$entries3$_i[1];

                I.forEach(function (n) {
                  if (a >= e && a <= t) {
                    var _e3 = 0;
                    i.hasOwnProperty("".concat(n, "_7day_cases_per_100k")) && (_e3 = i["".concat(n, "_7day_cases_per_100k")]);
                    var _t4 = "-";
                    i.hasOwnProperty("".concat(n, "_cases")) && (_t4 = i["".concat(n, "_cases")]);
                    var _o2 = "-";
                    i.hasOwnProperty("".concat(n, "_7day_cases")) && (_o2 = i["".concat(n, "_7day_cases")]), l.push({
                      x: a,
                      y: n,
                      v: _e3,
                      d: _t4,
                      w: _o2
                    });
                  }
                }), o = a;
              };

              for (var _i3 = 0, _Object$entries3 = Object.entries(n.data); _i3 < _Object$entries3.length; _i3++) {
                _loop2();
              }

              F.data.datasets[0].data = l, w = l.length / I.length;

              var _r = document.createElement("h2");

              var _c;

              _r.setAttribute("class", "offset-xl-1 col-xl-10 lead"), _r.innerText = k.matrixChartTitle(E[a].name, j(new Date(o)));

              var _d2 = document.getElementById("titleContainer");

              for (; _c = _d2.firstChild;) {
                _c.remove();
              }

              _d2.appendChild(_r);

              try {
                y.destroy();
              } catch (e) {} finally {
                y = new Chart(b, F);
              }

              i(a), document.getElementById("resultsContainer").scrollIntoView(!0);
            }
          })();
        }
      }).catch(function (e) {
        console.log(e);
      }).then(function () {});
    });
  }

  var f,
      y,
      b,
      x = !1,
      E = {};
  var k = {
    matrixChartTitle: function matrixChartTitle(e, t) {
      return "".concat(e, ": COVID-19 7-Tage-Inzidenzwerte nach Altersgruppen, Stand: ").concat(t);
    }
  };
  var A,
      v,
      w = 0,
      C = [];
  var I = ["total", "A00-A04", "A05-A14", "A15-A34", "A35-A59", "A60-A79", "A80+"],
      $ = ["total", "A00-05", "A06-09", "A10-14", "A15-19", "A20-29", "A30-44", "A45-59", "A60-74", "A75+"],
      L = ["Alle", "0–4", "5—14", "15—34", "35—59", "60—79", "80+"],
      B = ["Alle", "0–5", "6—9", "10—14", "15–19", "20—29", "30—44", "45—59", "60—74", "75+"],
      M = $,
      T = B,
      D = {
    DEFAULT: {
      label: "Standard-Farbschema",
      ranges: [{
        min: 0,
        max: 5,
        color: "#f0f8ff"
      }, {
        min: 5,
        max: 10,
        color: "#d9e2eb"
      }, {
        min: 10,
        max: 15,
        color: "#c3ccd7"
      }, {
        min: 15,
        max: 20,
        color: "#aeb7c3"
      }, {
        min: 20,
        max: 35,
        color: "#99a2b0"
      }, {
        min: 35,
        max: 50,
        color: "#868e9d"
      }, {
        min: 50,
        max: 100,
        color: "#737a8a"
      }, {
        min: 100,
        max: 150,
        color: "#606678"
      }, {
        min: 150,
        max: 200,
        color: "#4f5366"
      }, {
        min: 200,
        max: 300,
        color: "#3e4155"
      }, {
        min: 300,
        max: 600,
        color: "#2e3044"
      }, {
        min: 600,
        max: 1 / 0,
        color: "#1f1f33"
      }]
    },
    PURPLEGREENYELLOW: {
      label: "Lila-Grün-Gelb",
      ranges: [{
        min: 0,
        max: 5,
        color: "#441155"
      }, {
        min: 5,
        max: 10,
        color: "#341264"
      }, {
        min: 10,
        max: 15,
        color: "#1a1374"
      }, {
        min: 15,
        max: 20,
        color: "#133283"
      }, {
        min: 20,
        max: 35,
        color: "#136193"
      }, {
        min: 35,
        max: 50,
        color: "#129ca2"
      }, {
        min: 50,
        max: 100,
        color: "#10b282"
      }, {
        min: 100,
        max: 150,
        color: "#0ec14f"
      }, {
        min: 150,
        max: 200,
        color: "#0bd110"
      }, {
        min: 200,
        max: 300,
        color: "#4de008"
      }, {
        min: 300,
        max: 600,
        color: "#9ff004"
      }, {
        min: 600,
        max: 1 / 0,
        color: "#ffff00"
      }]
    },
    TEAL: {
      label: "Farbschema Türkis",
      ranges: [{
        min: 0,
        max: 5,
        color: "#6eeefa"
      }, {
        min: 5,
        max: 35,
        color: "#63d4e2"
      }, {
        min: 35,
        max: 50,
        color: "#58bbca"
      }, {
        min: 50,
        max: 100,
        color: "#4da2b3"
      }, {
        min: 100,
        max: 150,
        color: "#428b9c"
      }, {
        min: 150,
        max: 200,
        color: "#387386"
      }, {
        min: 200,
        max: 300,
        color: "#2d5d71"
      }, {
        min: 300,
        max: 400,
        color: "#23475c"
      }, {
        min: 400,
        max: 1 / 0,
        color: "#193348"
      }]
    },
    RKIHEATMAP: {
      label: "RKI-Heatmap",
      ranges: [{
        min: 0,
        max: 5,
        color: "#d0d1e6"
      }, {
        min: 5,
        max: 10,
        color: "#a6bedb"
      }, {
        min: 10,
        max: 15,
        color: "#7cacd1"
      }, {
        min: 15,
        max: 20,
        color: "#a6c883"
      }, {
        min: 20,
        max: 35,
        color: "#e5ef25"
      }, {
        min: 35,
        max: 50,
        color: "#ffe600"
      }, {
        min: 50,
        max: 100,
        color: "#ffbd00"
      }, {
        min: 100,
        max: 150,
        color: "#ff8700"
      }, {
        min: 150,
        max: 200,
        color: "#ff3c00"
      }, {
        min: 200,
        max: 300,
        color: "#f40000"
      }, {
        min: 300,
        max: 600,
        color: "#bf0000"
      }, {
        min: 600,
        max: 1 / 0,
        color: "#8b0000"
      }]
    }
  };
  var S, z;
  var F = {
    type: "matrix",
    data: {
      datasets: [{
        label: "",
        data: [],
        borderColor: "#000",
        borderWidth: function borderWidth(e) {
          return "total" === e.raw.y ? {
            top: 4,
            left: 0,
            right: 0,
            bottom: 0
          } : 0;
        },
        backgroundColor: function backgroundColor(e) {
          var t = S || "DEFAULT",
              a = e.dataset.data[e.dataIndex].v;
          var n = D[t].ranges[0].color;
          return D[t].ranges.forEach(function (e) {
            a > e.min && a <= e.max && (n = e.color);
          }), n;
        },
        height: function height(e) {
          var t = e.chart.chartArea;
          return t ? (t.bottom - t.top) / I.length + 1 : 0;
        },
        width: function width(e) {
          var t = e.chart.chartArea;
          return t ? (t.right - t.left) / w + 1 : 0;
        }
      }]
    },
    options: {
      animation: {
        duration: 0
      },
      layout: {
        padding: 15
      },
      plugins: {
        title: {
          display: !1
        },
        tooltip: {
          displayColors: !1,
          callbacks: {
            title: function title() {
              return "";
            },
            label: function label(e) {
              var t = e.dataset.data[e.dataIndex];
              return ["".concat(j(t.x)), "Inzidenz: ".concat(t.v.toString().replace(".", ",")), "F\xE4lle heute: ".concat(t.d.toString().replace(".", ",")), "F\xE4lle letzte 7 Tage: ".concat(t.w.toString().replace(".", ","))];
            }
          }
        },
        legend: {
          display: !1
        }
      },
      scales: {
        x: {
          type: "time",
          offset: !0,
          time: {
            unit: "week",
            round: "day",
            isoWeekday: 1,
            displayFormats: {
              week: "DD.MM.YY",
              day: "DD.MM.YY"
            }
          },
          ticks: {
            font: {
              size: 12,
              family: "Monospace"
            },
            color: "#333",
            maxRotation: 90,
            minRotation: 90,
            autoSkip: !0,
            padding: 0
          },
          grid: {
            display: !1,
            drawBorder: !1,
            tickMarkLength: 0
          },
          gridLines: {
            display: !1
          }
        },
        "y-1": {
          display: !0,
          type: "category",
          position: "left",
          title: {
            color: "#333",
            display: !0,
            text: "Alter in Jahren",
            font: {
              size: 14,
              family: "Monospace"
            }
          },
          offset: !0,
          labels: I,
          ticks: {
            display: !0,
            callback: function callback(e, t, a) {
              return L[e];
            },
            font: {
              size: 12,
              family: "Monospace"
            },
            color: "#333",
            padding: 5,
            autoSkip: !1
          },
          grid: {
            display: !1,
            drawBorder: !1,
            tickMarkLength: 0
          },
          gridLines: {
            display: !1
          }
        },
        "y-2": {
          display: !0,
          type: "category",
          position: "right",
          offset: !0,
          labels: I,
          ticks: {
            display: !0,
            callback: function callback(e, t, a) {
              return L[e];
            },
            font: {
              size: 12,
              family: "Monospace"
            },
            color: "#333",
            padding: 5,
            autoSkip: !1
          },
          grid: {
            display: !1,
            drawBorder: !1,
            tickMarkLength: 0
          },
          gridLines: {
            display: !1
          }
        }
      }
    }
  },
      O = {
    type: "matrix",
    data: {
      datasets: [{
        label: "",
        data: [],
        borderColor: "#000",
        borderWidth: function borderWidth(e) {
          return "total" === e.raw.y ? {
            top: 4,
            left: 0,
            right: 0,
            bottom: 0
          } : 0;
        },
        backgroundColor: function backgroundColor(e) {
          var t = S || "DEFAULT",
              a = e.dataset.data[e.dataIndex].v;
          var n = D[t].ranges[0].color;
          return D[t].ranges.forEach(function (e) {
            a > e.min && a <= e.max && (n = e.color);
          }), n;
        },
        height: function height(e) {
          var t = e.chart.chartArea;
          return t ? (t.bottom - t.top) / M.length + 1 : 0;
        },
        width: function width(e) {
          var t = e.chart.chartArea;
          return t ? (t.right - t.left) / w + 1 : 0;
        }
      }]
    },
    options: {
      animation: {
        duration: 0
      },
      layout: {
        padding: 15
      },
      plugins: {
        title: {
          display: !1
        },
        tooltip: {
          displayColors: !1,
          callbacks: {
            title: function title() {
              return "";
            },
            label: function label(e) {
              var t = e.dataset.data[e.dataIndex];
              return ["".concat(t.x, " (").concat(moment(t.first).format("D.M.YY"), "\u2013").concat(moment(t.last).format("D.M.YY"), ")"), "Inzidenz: ".concat(t.v.toString().replace(".", ",")), "neue F\xE4lle: ".concat(t.c), "Altersgruppe: ".concat(T[M.indexOf(t.y)]), "Bev\xF6lkerung: ".concat(t.p)];
            }
          }
        },
        legend: {
          display: !1
        }
      },
      scales: {
        x: {
          type: "category",
          offset: !0,
          title: {
            color: "#333",
            display: !0,
            text: "Kalenderwoche",
            font: {
              size: 14,
              family: "Monospace"
            },
            padding: {
              top: 5
            }
          },
          ticks: {
            font: {
              size: 12,
              family: "Monospace"
            },
            color: "#333",
            maxRotation: 90,
            minRotation: 90,
            autoSkip: !0,
            beginAtZero: !0
          },
          grid: {
            display: !1,
            drawBorder: !1,
            tickMarkLength: 0
          },
          gridLines: {
            display: !1
          }
        },
        "y-1": {
          display: !0,
          type: "category",
          position: "left",
          title: {
            color: "#333",
            display: !0,
            text: "Alter in Jahren",
            font: {
              size: 14,
              family: "Monospace"
            }
          },
          offset: !0,
          labels: M,
          ticks: {
            display: !0,
            callback: function callback(e, t, a) {
              return T[e];
            },
            font: {
              size: 12,
              family: "Monospace"
            },
            color: "#333",
            padding: 5,
            autoSkip: !1
          },
          grid: {
            display: !1,
            drawBorder: !1,
            tickMarkLength: 0
          },
          gridLines: {
            display: !1
          }
        },
        "y-2": {
          display: !0,
          type: "category",
          position: "right",
          offset: !0,
          labels: M,
          ticks: {
            display: !0,
            callback: function callback(e, t, a) {
              return T[e];
            },
            font: {
              size: 12,
              family: "Monospace"
            },
            color: "#333",
            padding: 5,
            autoSkip: !1
          },
          grid: {
            display: !1,
            drawBorder: !1,
            tickMarkLength: 0
          },
          gridLines: {
            display: !1
          }
        }
      }
    }
  };

  var j = function j(e) {
    return moment.isDate(e) || (e = new Date(e)), "".concat(e.getDate(), ". ").concat(e.toLocaleString("de-DE", {
      month: "long"
    }), " ").concat(e.getFullYear());
  };

  document.getElementById("landkreisSelect").addEventListener("change", function (t) {
    return e(t);
  }), document.getElementById("updateChartsButton").addEventListener("click", s), document.querySelectorAll("input[name=colorscheme]").forEach(function (e) {
    e.addEventListener("change", function (e) {
      return t(e);
    });
  }), document.querySelectorAll("input[name=timeframe]").forEach(function (e) {
    e.addEventListener("change", function (e) {
      return r(e);
    });
  }), document.querySelectorAll("input[name=heatmapversion]").forEach(function (e) {
    e.addEventListener("change", function (e) {
      return o(e);
    });
  }), document.addEventListener("DOMContentLoaded", function (n) {
    moment.locale("de-DE");
    var i = window.location.hash.substr(1);
    i && (i = i.split("/")), i && i[1] && l(i[1]), i && i[2] && c(i[2]), i && i[3] && a(i[3]), o(), t(), r(), axios.get("data/landkreise.json").then(function (t) {
      if (t.data) {
        E = {}, Object.keys(t.data).sort(function (e, a) {
          return t.data[e].sorting > t.data[a].sorting ? 1 : t.data[e].sorting < t.data[a].sorting ? -1 : 0;
        }).forEach(function (e) {
          var a = t.data[e];
          var n = ("0000" + e).slice(-5);
          E[n] = a;
          var o = document.createElement("option");
          o.setAttribute("value", n), o.innerText = "".concat(a.name), o.selected = i && i[0] === n, document.getElementById("landkreisSelect").appendChild(o);
        }), document.getElementById("landkreisSelect").disabled = !1, e();
        var _a2 = document.getElementById("landkreisSelect").validity.valid;
        !0 === _a2 && document.getElementById("updateChartsButton").dispatchEvent(new Event("click")), !0 !== x || i[0] || (C = [Object.keys(E)[0]], g());
      }
    });
  });
})();